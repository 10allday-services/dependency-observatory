# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2.1
jobs:
  check-format:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            pip install --user "$(grep black depobs/requirements.txt)"
      - run:
          name: check code is formatted with black and output diff
          command: |
            black --config pyproject.toml --diff .
            black --config pyproject.toml --check .

  check-types:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            # unquoted grep so we install mypy and mypy extensions
            pip install --user $(grep mypy depobs/requirements.txt)
      - run:
          name: check code is properly typed
          command: |
            mypy --config setup.cfg

  unit-test:
    docker:
      - image: circleci/python:buster
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@db/dependency_observatory
      INIT_DB: 0
      CELERY_BROKER_URL: sqla+postgresql://postgres:postgres@db/dependency_observatory
      CELERY_RESULT_BACKEND: db+postgresql://postgres:postgres@db/dependency_observatory
    steps:
      - checkout
      - run:
          name: write a version.json in depobs/
          command: |
            CI=1 ./util/write_version_json.sh > depobs/version.json
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            pip install --user -r depobs/requirements.txt
      - run:
          name: run unit tests with coverage (no DB)
          command: |
            coverage run -m pytest -m unit
            coverage report
            coverage html
      - run:
          name: generate coverage reports
          command: |
            coverage report
            coverage html
            mv /tmp/htmlcov/ unit-test-htmlcov
      - store_artifacts:
          path: unit-test-htmlcov

  build-images:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: write a version.json in depobs/
          command: |
            CI=1 ./util/write_version_json.sh > depobs/version.json
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: save built image to cache
          command: docker save "${DOCKERHUB_REPO}:latest" | gzip -c > /tmp/docker.tgz
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/docker.tgz

  test-images:
    docker:
      - image: circleci/python:buster
    environment:
      CELERY_BROKER_URL: sqla+postgresql://postgres:postgres@db/dependency_observatory
      CELERY_RESULT_BACKEND: db+postgresql://postgres:postgres@db/dependency_observatory
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@db/dependency_observatory
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /tmp/docker.tgz | docker load
      - run:
          name: start test DB and create project_default network
          command: docker-compose up -d db
      - run:
          name: start test api and worker (w/o volume mounts)
          command: |
            docker run -d --rm --name dependency-observatory-api --network project_default --link db -e "SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI" -e "CELERY_BROKER_URL=$CELERY_BROKER_URL" -e "CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND" -e "INIT_DB=1" -e "HOST=0.0.0.0" -e "PORT=8000" -e "FLASK_ENV=production" -e "FLASK_APP=/app/depobs/website/do.py" -p 8000:8000 mozilla/dependency-observatory migrate web
            docker run -d -u 0 --rm -v /var/run/docker.sock:/var/run/docker.sock  --network project_default --link db --name dependency-observatory-worker -e "FLASK_APP=/app/depobs/website/do.py" -e "SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI" -e "CELERY_BROKER_URL=$CELERY_BROKER_URL" -e "CELERY_RESULT_BACKEND=$CELERY_RESULT_BACKEND" mozilla/dependency-observatory worker
      - run:
          name: show running containers
          command: docker ps --no-trunc
      - run:
          name: run unit and integration tests with coverage
          command: |
            CI=1 ./util/run_tests_with_coverage.sh -v
      - run:
          name: run e2e test
          command: |
            docker exec -u 0 dependency-observatory-api /app/bin/e2e_test.sh || (
                docker logs dependency-observatory-worker;
                docker logs dependency-observatory-api;
            )
      - run:
          name: stop test DB
          command: docker-compose stop db
      - run:
          name: mv coverage reports
          command: |
            mv htmlcov/ test-images-htmlcov
      - store_artifacts:
          path: test-images-htmlcov

  deploy:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /tmp/docker.tgz | docker load
      - run:
          name: deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker-compose push api
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag "${DOCKERHUB_REPO}:latest" "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  check-readme-local-dev:
    jobs:
      - check-format:
        filters:
          tags:
            only: /.*/

      - check-types:
        filters:
          tags:
            only: /.*/

      - unit-test:
        filters:
          tags:
            only: /.*/

      - build-images:
          filters:
            tags:
              only: /.*/

      - test-images:
          requires:
            - build-images
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - check-format
            - check-types
            - unit-test
            - test-images
            - build-images
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]+\.[0-9]+/
            branches:
              only: master
